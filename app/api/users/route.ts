import { NextRequest, NextResponse } from 'next/server'

// POST /api/users - Create a new user
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { firstname, lastname, email, provider, externalid, subid, motivationid } = body

    // Validate required fields
    if (!email || !provider || !externalid) {
      return NextResponse.json(
        { error: 'Missing required fields: email, provider, externalid' },
        { status: 400 }
      )
    }

    console.log('Creating user with data:', { firstname, lastname, email, provider, externalid })

    // Here you would typically save to your database
    // For now, I'll create a mock response that matches your database structure
    const newUser = {
      id: Math.floor(Math.random() * 1000000), // In real implementation, this would be auto-generated by DB
      firstname: firstname || '',
      lastname: lastname || '',
      email,
      provider,
      externalid,
      subid: subid || '',
      motivationid: motivationid || null,
      createddate: new Date().toISOString(),
      updateddate: new Date().toISOString()
    }

    console.log('Mock user created:', newUser)

    // TODO: Replace this with actual database insertion
    // Example with Prisma:
    // const result = await prisma.users.create({
    //   data: {
    //     firstname,
    //     lastname,
    //     email,
    //     provider,
    //     externalid,
    //     subid,
    //     motivationid
    //   }
    // })
    // 
    // Example with raw SQL:
    // const result = await db.query(`
    //   INSERT INTO users (firstname, lastname, email, provider, externalid, subid, motivationid)
    //   VALUES ($1, $2, $3, $4, $5, $6, $7)
    //   RETURNING *
    // `, [firstname, lastname, email, provider, externalid, subid, motivationid])

    return NextResponse.json(newUser, { status: 201 })
  } catch (error) {
    console.error('Error creating user:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
